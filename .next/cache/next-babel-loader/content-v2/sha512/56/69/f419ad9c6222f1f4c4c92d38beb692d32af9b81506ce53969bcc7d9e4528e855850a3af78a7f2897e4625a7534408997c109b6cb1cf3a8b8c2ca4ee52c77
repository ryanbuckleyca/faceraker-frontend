{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { markerClass } from './markers';\nimport { getCoords } from './coords';\nimport PopUpCard from './PopUpCard';\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n});\n\nconst Mapbox = ({\n  refs,\n  children,\n  mapSettings,\n  setMapSettings\n}) => {\n  if (!children || children.length <= 1) return false;\n  return /*#__PURE__*/_jsxDEV(Map, {\n    style: \"mapbox://styles/mapbox/streets-v11\",\n    center: mapSettings.center,\n    zoom: mapSettings.zoom,\n    containerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    children: children.map(post => /*#__PURE__*/_jsxDEV(MarkerAndPopup, {\n      setMapSettings: setMapSettings,\n      mapSettings: mapSettings,\n      post: post,\n      refs: refs\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nconst MarkerAndPopup = ({\n  post,\n  refs,\n  mapSettings,\n  setMapSettings\n}) => {\n  const {\n    0: showPopup,\n    1: setShowPopup\n  } = useState();\n\n  const expandMarker = post => {\n    setShowPopup(post.id);\n    setMapSettings(_objectSpread(_objectSpread({}, mapSettings), {}, {\n      zoom: [10],\n      center: [post.longitude, post.latitude]\n    }));\n  }; // @TODO: getCoords re-renders on every state change\n  // which moves the markers randomly, as getCoords should\n  // better to set random coords when fetching or initially saving data\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PopUpCard, {\n      post: post,\n      refs: refs,\n      show: showPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      coordinates: [getCoords(post).lng, getCoords(post).lat],\n      anchor: \"bottom\",\n      onClick: () => expandMarker(post),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: markerClass(post)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Mapbox;","map":{"version":3,"sources":["/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js"],"names":["useState","markerClass","getCoords","PopUpCard","ReactMapboxGl","Marker","Map","accessToken","process","env","NEXT_PUBLIC_MAPBOX","Mapbox","refs","children","mapSettings","setMapSettings","length","center","zoom","height","width","map","post","id","MarkerAndPopup","showPopup","setShowPopup","expandMarker","longitude","latitude","lng","lat"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,aAAP,IAAwBC,MAAxB,QAAsC,iBAAtC;AACA,OAAO,8BAAP;AAEA,MAAMC,GAAG,GAAGF,aAAa,CAAC;AACxBG,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADD,CAAD,CAAzB;;AAIA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA;AAA/B,CAAD,KAAqD;AAClE,MAAI,CAACF,QAAD,IAAaA,QAAQ,CAACG,MAAT,IAAmB,CAApC,EAAuC,OAAO,KAAP;AAEvC,sBACE,QAAC,GAAD;AACE,IAAA,KAAK,EAAC,oCADR;AAEE,IAAA,MAAM,EAAEF,WAAW,CAACG,MAFtB;AAGE,IAAA,IAAI,EAAEH,WAAW,CAACI,IAHpB;AAIE,IAAA,cAAc,EAAE;AACdC,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAJlB;AAAA,cASGP,QAAQ,CAACQ,GAAT,CAAcC,IAAD,iBACZ,QAAC,cAAD;AAEE,MAAA,cAAc,EAAEP,cAFlB;AAGE,MAAA,WAAW,EAAED,WAHf;AAIE,MAAA,IAAI,EAAEQ,IAJR;AAKE,MAAA,IAAI,EAAEV;AALR,OACOU,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,YADD;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxBD;;AA0BA,MAAMC,cAAc,GAAG,CAAC;AAAEF,EAAAA,IAAF;AAAQV,EAAAA,IAAR;AAAcE,EAAAA,WAAd;AAA2BC,EAAAA;AAA3B,CAAD,KAAiD;AACtE,QAAM;AAAA,OAACU,SAAD;AAAA,OAAYC;AAAZ,MAA4B1B,QAAQ,EAA1C;;AAEA,QAAM2B,YAAY,GAAIL,IAAD,IAAU;AAC7BI,IAAAA,YAAY,CAACJ,IAAI,CAACC,EAAN,CAAZ;AACAR,IAAAA,cAAc,iCACTD,WADS;AAEZI,MAAAA,IAAI,EAAE,CAAC,EAAD,CAFM;AAGZD,MAAAA,MAAM,EAAE,CAACK,IAAI,CAACM,SAAN,EAAiBN,IAAI,CAACO,QAAtB;AAHI,OAAd;AAKD,GAPD,CAHsE,CAYtE;AACA;AACA;;;AACA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEP,IAAjB;AAAuB,MAAA,IAAI,EAAEV,IAA7B;AAAmC,MAAA,IAAI,EAAEa;AAAzC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAEE,MAAA,WAAW,EAAE,CAACvB,SAAS,CAACoB,IAAD,CAAT,CAAgBQ,GAAjB,EAAsB5B,SAAS,CAACoB,IAAD,CAAT,CAAgBS,GAAtC,CAFf;AAGE,MAAA,MAAM,EAAC,QAHT;AAIE,MAAA,OAAO,EAAE,MAAMJ,YAAY,CAACL,IAAD,CAJ7B;AAAA,6BAME;AAAK,QAAA,SAAS,EAAErB,WAAW,CAACqB,IAAD;AAA3B;AAAA;AAAA;AAAA;AAAA;AANF,OACOA,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAaD,CA5BD;;AA+BA,eAAeZ,MAAf","sourcesContent":["import { useState } from 'react'\nimport { markerClass } from './markers'\nimport { getCoords } from './coords'\nimport PopUpCard from './PopUpCard'\n\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n})\n\nconst Mapbox = ({ refs, children, mapSettings, setMapSettings }) => {\n  if (!children || children.length <= 1) return false\n\n  return (\n    <Map\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      center={mapSettings.center}\n      zoom={mapSettings.zoom}\n      containerStyle={{\n        height: '100%',\n        width: '100%'\n      }}\n    >\n      {children.map((post) => \n        <MarkerAndPopup\n          key={post.id}\n          setMapSettings={setMapSettings}\n          mapSettings={mapSettings}\n          post={post}\n          refs={refs}\n        />\n      )}\n    </Map>\n  )\n}\n\nconst MarkerAndPopup = ({ post, refs, mapSettings, setMapSettings }) => {\n  const [showPopup, setShowPopup] = useState()\n\n  const expandMarker = (post) => {\n    setShowPopup(post.id)\n    setMapSettings({ \n      ...mapSettings,\n      zoom: [10],\n      center: [post.longitude, post.latitude] \n    })\n  }  \n\n  // @TODO: getCoords re-renders on every state change\n  // which moves the markers randomly, as getCoords should\n  // better to set random coords when fetching or initially saving data\n  return (\n    <>\n      <PopUpCard post={post} refs={refs} show={showPopup} />\n      <Marker\n        key={post.id}\n        coordinates={[getCoords(post).lng, getCoords(post).lat]}\n        anchor=\"bottom\"\n        onClick={() => expandMarker(post)}\n      >\n        <div className={markerClass(post)}></div>\n      </Marker>\n    </>\n  )\n}\n\n\nexport default Mapbox\n"]},"metadata":{},"sourceType":"module"}