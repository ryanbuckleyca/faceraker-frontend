{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { markerClass } from './markers';\nimport { getCoords } from './coords';\nimport PopUpCard from './PopUpCard';\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nvar Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n});\n_c = Map;\n\nvar Mapbox = function Mapbox(_ref) {\n  var refs = _ref.refs,\n      children = _ref.children,\n      mapSettings = _ref.mapSettings,\n      setMapSettings = _ref.setMapSettings;\n  if (!children || children.length <= 1) return false;\n  return /*#__PURE__*/_jsxDEV(Map, {\n    style: \"mapbox://styles/mapbox/streets-v11\",\n    center: mapSettings.center,\n    zoom: mapSettings.zoom,\n    containerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    children: children.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(MarkerAndPopup, {\n        setMapSettings: setMapSettings,\n        mapSettings: mapSettings,\n        post: post,\n        refs: refs\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, _this);\n};\n\n_c2 = Mapbox;\n\nvar MarkerAndPopup = function MarkerAndPopup(_ref2) {\n  _s();\n\n  var post = _ref2.post,\n      refs = _ref2.refs;\n\n  var _useState = useState(false),\n      showPopup = _useState[0],\n      setShowPopup = _useState[1];\n\n  var expandMarker = function expandMarker(post) {\n    setShowPopup(!showPopup);\n    setMapSettings(_objectSpread(_objectSpread({}, mapSettings), {}, {\n      zoom: [10],\n      center: [post.longitude, post.latitude]\n    }));\n  }; // @TODO: getCoords re-renders on every state change\n  // which moves the markers randomly, as getCoords should\n  // better to set random coords when fetching or initially saving data\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PopUpCard, {\n      post: post,\n      refs: refs,\n      show: showPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Marker, {\n      coordinates: [getCoords(post).lng, getCoords(post).lat],\n      anchor: \"bottom\",\n      onClick: function onClick() {\n        return expandMarker(post);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: markerClass(post)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, _this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MarkerAndPopup, \"YxEq4CBtuWdF8IGTVx1DJqim++A=\");\n\n_c3 = MarkerAndPopup;\nexport default Mapbox;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"Mapbox\");\n$RefreshReg$(_c3, \"MarkerAndPopup\");","map":{"version":3,"sources":["/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js"],"names":["useState","markerClass","getCoords","PopUpCard","ReactMapboxGl","Marker","Map","accessToken","process","env","NEXT_PUBLIC_MAPBOX","Mapbox","refs","children","mapSettings","setMapSettings","length","center","zoom","height","width","map","post","id","MarkerAndPopup","showPopup","setShowPopup","expandMarker","longitude","latitude","lng","lat"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,aAAP,IAAwBC,MAAxB,QAAsC,iBAAtC;AACA,OAAO,8BAAP;AAEA,IAAMC,GAAG,GAAGF,aAAa,CAAC;AACxBG,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADD,CAAD,CAAzB;KAAMJ,G;;AAIN,IAAMK,MAAM,GAAG,SAATA,MAAS,OAAqD;AAAA,MAAlDC,IAAkD,QAAlDA,IAAkD;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;AAAA,MAAlCC,WAAkC,QAAlCA,WAAkC;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AAClE,MAAI,CAACF,QAAD,IAAaA,QAAQ,CAACG,MAAT,IAAmB,CAApC,EAAuC,OAAO,KAAP;AAEvC,sBACE,QAAC,GAAD;AACE,IAAA,KAAK,EAAC,oCADR;AAEE,IAAA,MAAM,EAAEF,WAAW,CAACG,MAFtB;AAGE,IAAA,IAAI,EAAEH,WAAW,CAACI,IAHpB;AAIE,IAAA,cAAc,EAAE;AACdC,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAJlB;AAAA,cASGP,QAAQ,CAACQ,GAAT,CAAa,UAACC,IAAD;AAAA,0BACZ,QAAC,cAAD;AAEE,QAAA,cAAc,EAAEP,cAFlB;AAGE,QAAA,WAAW,EAAED,WAHf;AAIE,QAAA,IAAI,EAAEQ,IAJR;AAKE,QAAA,IAAI,EAAEV;AALR,SACOU,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,eADY;AAAA,KAAb;AATH;AAAA;AAAA;AAAA;AAAA,WADF;AAqBD,CAxBD;;MAAMZ,M;;AA0BN,IAAMa,cAAc,GAAG,SAAjBA,cAAiB,QAAoB;AAAA;;AAAA,MAAjBF,IAAiB,SAAjBA,IAAiB;AAAA,MAAXV,IAAW,SAAXA,IAAW;;AAAA,kBACPZ,QAAQ,CAAC,KAAD,CADD;AAAA,MAClCyB,SADkC;AAAA,MACvBC,YADuB;;AAGzC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,IAAD,EAAU;AAC7BI,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACAV,IAAAA,cAAc,iCACTD,WADS;AAEZI,MAAAA,IAAI,EAAE,CAAC,EAAD,CAFM;AAGZD,MAAAA,MAAM,EAAE,CAACK,IAAI,CAACM,SAAN,EAAiBN,IAAI,CAACO,QAAtB;AAHI,OAAd;AAKD,GAPD,CAHyC,CAYzC;AACA;AACA;;;AACA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEP,IAAjB;AAAuB,MAAA,IAAI,EAAEV,IAA7B;AAAmC,MAAA,IAAI,EAAEa;AAAzC;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,MAAD;AAEE,MAAA,WAAW,EAAE,CAACvB,SAAS,CAACoB,IAAD,CAAT,CAAgBQ,GAAjB,EAAsB5B,SAAS,CAACoB,IAAD,CAAT,CAAgBS,GAAtC,CAFf;AAGE,MAAA,MAAM,EAAC,QAHT;AAIE,MAAA,OAAO,EAAE;AAAA,eAAMJ,YAAY,CAACL,IAAD,CAAlB;AAAA,OAJX;AAAA,6BAME;AAAK,QAAA,SAAS,EAAErB,WAAW,CAACqB,IAAD;AAA3B;AAAA;AAAA;AAAA;AAAA;AANF,OACOA,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAaD,CA5BD;;GAAMC,c;;MAAAA,c;AA+BN,eAAeb,MAAf","sourcesContent":["import { useState } from 'react'\nimport { markerClass } from './markers'\nimport { getCoords } from './coords'\nimport PopUpCard from './PopUpCard'\n\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n})\n\nconst Mapbox = ({ refs, children, mapSettings, setMapSettings }) => {\n  if (!children || children.length <= 1) return false\n\n  return (\n    <Map\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      center={mapSettings.center}\n      zoom={mapSettings.zoom}\n      containerStyle={{\n        height: '100%',\n        width: '100%'\n      }}\n    >\n      {children.map((post) => \n        <MarkerAndPopup\n          key={post.id}\n          setMapSettings={setMapSettings}\n          mapSettings={mapSettings}\n          post={post}\n          refs={refs}\n        />\n      )}\n    </Map>\n  )\n}\n\nconst MarkerAndPopup = ({ post, refs }) => {\n  const [showPopup, setShowPopup] = useState(false)\n\n  const expandMarker = (post) => {\n    setShowPopup(!showPopup)\n    setMapSettings({ \n      ...mapSettings,\n      zoom: [10],\n      center: [post.longitude, post.latitude] \n    })\n  }  \n\n  // @TODO: getCoords re-renders on every state change\n  // which moves the markers randomly, as getCoords should\n  // better to set random coords when fetching or initially saving data\n  return (\n    <>\n      <PopUpCard post={post} refs={refs} show={showPopup} />\n      <Marker\n        key={post.id}\n        coordinates={[getCoords(post).lng, getCoords(post).lat]}\n        anchor=\"bottom\"\n        onClick={() => expandMarker(post)}\n      >\n        <div className={markerClass(post)}></div>\n      </Marker>\n    </>\n  )\n}\n\n\nexport default Mapbox\n"]},"metadata":{},"sourceType":"module"}