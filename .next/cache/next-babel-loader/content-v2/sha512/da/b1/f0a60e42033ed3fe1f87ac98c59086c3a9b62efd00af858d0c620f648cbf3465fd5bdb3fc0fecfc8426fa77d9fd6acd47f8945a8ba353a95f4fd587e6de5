{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { markerClass } from './markers';\nimport { getCoords } from './coords';\nimport PopUpCard from './PopUpCard';\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n});\n\nconst Mapbox = ({\n  refs,\n  children,\n  mapSettings,\n  setMapSettings\n}) => {\n  if (!children || children.length <= 1) return false;\n\n  const MarkerAndPopup = ({\n    post,\n    refs\n  }) => {\n    const {\n      0: showPopup,\n      1: setShowPopup\n    } = useState(false);\n\n    const expandMarker = post => {\n      setShowPopup(true);\n      setMapSettings(_objectSpread(_objectSpread({}, mapSettings), {}, {\n        zoom: [10],\n        center: [post.longitude, post.latitude]\n      }));\n    }; // @TODO: getCoords re-renders on every state change\n    // which moves the markers randomly, as getCoords should\n    // better to set random coords when fetching or initially saving data\n\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PopUpCard, {\n        post: post,\n        refs: refs,\n        show: showPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        coordinates: [getCoords(post).lng, getCoords(post).lat],\n        anchor: \"bottom\",\n        onClick: () => expandMarker(post),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: markerClass(post)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Map, {\n    style: \"mapbox://styles/mapbox/streets-v11\",\n    center: mapSettings.center,\n    zoom: mapSettings.zoom,\n    containerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    children: children.map(post => /*#__PURE__*/_jsxDEV(MarkerAndPopup, {\n      post: post,\n      refs: refs\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Mapbox;","map":{"version":3,"sources":["/Users/apinrise/Code/ryanbuckleyca/louwer/frontend/components/Mapbox/index.js"],"names":["useState","markerClass","getCoords","PopUpCard","ReactMapboxGl","Marker","Map","accessToken","process","env","NEXT_PUBLIC_MAPBOX","Mapbox","refs","children","mapSettings","setMapSettings","length","MarkerAndPopup","post","showPopup","setShowPopup","expandMarker","zoom","center","longitude","latitude","lng","lat","id","height","width","map"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,aAAP,IAAwBC,MAAxB,QAAsC,iBAAtC;AACA,OAAO,8BAAP;AAEA,MAAMC,GAAG,GAAGF,aAAa,CAAC;AACxBG,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADD,CAAD,CAAzB;;AAIA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA;AAA/B,CAAD,KAAqD;AAClE,MAAI,CAACF,QAAD,IAAaA,QAAQ,CAACG,MAAT,IAAmB,CAApC,EAAuC,OAAO,KAAP;;AAEvC,QAAMC,cAAc,GAAG,CAAC;AAAEC,IAAAA,IAAF;AAAQN,IAAAA;AAAR,GAAD,KAAoB;AACzC,UAAM;AAAA,SAACO,SAAD;AAAA,SAAYC;AAAZ,QAA4BpB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,UAAMqB,YAAY,GAAIH,IAAD,IAAU;AAC7BE,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,MAAAA,cAAc,iCACTD,WADS;AAEZQ,QAAAA,IAAI,EAAE,CAAC,EAAD,CAFM;AAGZC,QAAAA,MAAM,EAAE,CAACL,IAAI,CAACM,SAAN,EAAiBN,IAAI,CAACO,QAAtB;AAHI,SAAd;AAKD,KAPD,CAHyC,CAYzC;AACA;AACA;;;AACA,wBACE;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEP,IAAjB;AAAuB,QAAA,IAAI,EAAEN,IAA7B;AAAmC,QAAA,IAAI,EAAEO;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAEE,QAAA,WAAW,EAAE,CAACjB,SAAS,CAACgB,IAAD,CAAT,CAAgBQ,GAAjB,EAAsBxB,SAAS,CAACgB,IAAD,CAAT,CAAgBS,GAAtC,CAFf;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,OAAO,EAAE,MAAMN,YAAY,CAACH,IAAD,CAJ7B;AAAA,+BAME;AAAK,UAAA,SAAS,EAAEjB,WAAW,CAACiB,IAAD;AAA3B;AAAA;AAAA;AAAA;AAAA;AANF,SACOA,IAAI,CAACU,EADZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADF;AAaD,GA5BD;;AA8BA,sBACE,QAAC,GAAD;AACE,IAAA,KAAK,EAAC,oCADR;AAEE,IAAA,MAAM,EAAEd,WAAW,CAACS,MAFtB;AAGE,IAAA,IAAI,EAAET,WAAW,CAACQ,IAHpB;AAIE,IAAA,cAAc,EAAE;AACdO,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAJlB;AAAA,cASGjB,QAAQ,CAACkB,GAAT,CAAcb,IAAD,iBACZ,QAAC,cAAD;AAA8B,MAAA,IAAI,EAAEA,IAApC;AAA0C,MAAA,IAAI,EAAEN;AAAhD,OAAqBM,IAAI,CAACU,EAA1B;AAAA;AAAA;AAAA;AAAA,YADD;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhDD;;AAkDA,eAAejB,MAAf","sourcesContent":["import { useState } from 'react'\nimport { markerClass } from './markers'\nimport { getCoords } from './coords'\nimport PopUpCard from './PopUpCard'\n\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX\n})\n\nconst Mapbox = ({ refs, children, mapSettings, setMapSettings }) => {\n  if (!children || children.length <= 1) return false\n\n  const MarkerAndPopup = ({ post, refs }) => {\n    const [showPopup, setShowPopup] = useState(false)\n\n    const expandMarker = (post) => {\n      setShowPopup(true)\n      setMapSettings({ \n        ...mapSettings,\n        zoom: [10],\n        center: [post.longitude, post.latitude] \n      })\n    }  \n\n    // @TODO: getCoords re-renders on every state change\n    // which moves the markers randomly, as getCoords should\n    // better to set random coords when fetching or initially saving data\n    return (\n      <>\n        <PopUpCard post={post} refs={refs} show={showPopup} />\n        <Marker\n          key={post.id}\n          coordinates={[getCoords(post).lng, getCoords(post).lat]}\n          anchor=\"bottom\"\n          onClick={() => expandMarker(post)}\n        >\n          <div className={markerClass(post)}></div>\n        </Marker>\n      </>\n    )\n  }\n\n  return (\n    <Map\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      center={mapSettings.center}\n      zoom={mapSettings.zoom}\n      containerStyle={{\n        height: '100%',\n        width: '100%'\n      }}\n    >\n      {children.map((post) => \n        <MarkerAndPopup key={post.id} post={post} refs={refs} />\n      )}\n    </Map>\n  )\n}\n\nexport default Mapbox\n"]},"metadata":{},"sourceType":"module"}